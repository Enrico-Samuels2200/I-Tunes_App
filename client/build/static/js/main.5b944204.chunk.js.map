{"version":3,"sources":["routes/images/star.png","routes/images/home.png","routes/images/trash.png","routes/iTunesDiscover.js","routes/favouritesList.js","routes/routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","componentDidMount","fetchData","a","fetch","state","title","type","get","json","res","setState","data","results","window","location","reload","setTitle","event","setType","addFav","options","method","headers","body","JSON","stringify","alert","artistName","trackName","checkMedia","value","kind","src","previewUrl","controls","displayProjects","this","map","object","class","artworkUrl100","href","onClick","star","alt","placeholder","onChange","val","target","name","autoComplete","to","React","Component","favList","deleteItem","displayFav","herf","trash","home","path","exact","component","Landing","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b944204.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.8bebb87b.png\";","module.exports = __webpack_public_path__ + \"static/media/home.5a1c9515.png\";","module.exports = __webpack_public_path__ + \"static/media/trash.9f9bb223.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport star from './images/star.png';\r\nimport './styles/style.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = ({\r\n      data: [],\r\n      title: \"\",\r\n      type: \"\"\r\n    })\r\n  }\r\n\r\n  componentDidMount = () => { //Loads data once the component is mounted.\r\n    this.fetchData() //Calls the function fetchData.\r\n  }\r\n\r\n  fetchData = async () => { //Retrievs data from the express app.\r\n    try{\r\n      const get = await fetch(`/media/?name=${this.state.title}&type=${this.state.type}`) //Sends part of the url to the express app to retrieve specific data.\r\n      const res = await get.json() //Converts the code recieved from the API from a string into json code. \r\n      \r\n      this.setState({ //Sets the state.\r\n        data: res.results //Assign the returned value to 'data' in the state.\r\n      })\r\n    }catch (error) {\r\n      window.location.reload(false); //Reloads the page so data can reload until the api is recieved.\r\n    }\r\n  }\r\n\r\n  setTitle = (event) => { //Allow for a parameter to be passed through the function.\r\n    this.setState({\r\n      title: event //Assign the value the user entered to 'title' in the state.\r\n    })\r\n  }\r\n\r\n  setType = (event) => { //Allow for a parameter to be passed through the function.\r\n    this.setState({\r\n      type: event //Assign the value the user entered to 'title' in the state.\r\n    })\r\n  }\r\n\r\n  addFav = (event) => { //Allow for a parameter to be passed through the function.\r\n    const options = {\r\n      method: \"POST\", //Use post to send data to the express app.\r\n      headers: {\"Content-Type\": \"application/json\"}, //specify that the file been sent is a json file.\r\n      body: JSON.stringify(event) //Gets data from the passed parameters and then stringify the data so it may be passed to the express app.\r\n    };\r\n\r\n    fetch(\"/media\", options) //Passes data to the express app with the header 'options'.\r\n    alert(`${event.artistName}-${event.trackName}, was added to your favourites list.`) //Alerts user that their request was done correctly.\r\n  }\r\n\r\n  checkMedia = (value) => { //Allow for a parameter to be passed through the function.\r\n    if(value.kind === \"song\") { //If any of the items returned is a song it'll return the audio element so the user can preview the music.\r\n      return <audio src={value.previewUrl} controls/>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let displayProjects =  this.state.data.map( object =>  //Creates a map that will loop through an array of objects. For each object it'll return the code below.\r\n      [\r\n        <div class=\"displayItem\">\r\n          <img src={object.artworkUrl100}/> {/*Returns the image of the object.*/}\r\n          <p class=\"artistName\">{object.artistName} -</p> {/*Returnscthe artist name.*/}\r\n          <br/> \r\n          <p class=\"trackName\">{object.trackName} </p> {/*Returns the items name.*/}\r\n          {this.checkMedia(object)}\r\n          <br/>\r\n          <a href=\"#\" onClick={() => this.addFav(object)}><img src={star} alt=\"Favourite icon\" class=\"customButton\"/></a> {/*Adds the item to the users favourite list.*/}\r\n        </div>\r\n      ]\r\n    )\r\n    return(\r\n      <div>\r\n        <div class=\"navBar\">\r\n          <h1>I Tunes Search Engine</h1>\r\n          <input placeholder=\"Enter title here\" onChange={(val) => this.setTitle(val.target.value)} name=\"artistName\" autoComplete=\"off\"/>\r\n          <select onChange={(val) => this.setType(val.target.value)} class=\"typePick\"> {/*Getsthe type of data the user wishes to recieve.*/}\r\n            <option value=\"all\">all</option>\r\n            <option value=\"music\">music</option>\r\n            <option value=\"audio book\">audio book</option>\r\n            <option value=\"ebook\">ebook</option>\r\n          </select>\r\n          <button onClick={() => this.fetchData()}>Search</button>\r\n          <Link to={\"/favourites\"} class=\"icon\"><img src={star} alt=\"Star icon\"/></Link> {/*Link to go to the users favourite list.*/}\r\n          <br/>\r\n        </div>\r\n        <hr/>\r\n        {displayProjects}\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport home from './images/home.png';\r\nimport trash from './images/trash.png';\r\nimport './styles/style.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state=({\r\n        favList: []\r\n    })\r\n  }\r\n  \r\n\r\n  componentDidMount = () => { //Loads data once the component is mounted.\r\n    this.fetchData() //Calls the function fetchData.\r\n  }\r\n\r\n  fetchData = async () => { //Retrievs data from the express app.\r\n    try{\r\n      const get = await fetch('/favourites') //Sends part of the url to the express app to retrieve specific data.\r\n      const res = await get.json() //Converts the code recieved from the API from a string into json code. \r\n      this.setState({ //Sets the state.\r\n        favList: res //Assign the returned value to 'data' in the state.\r\n      })  \r\n    }catch (error) {\r\n      window.location.reload(false); //Reloads the page so data can reload until the api is recieved.\r\n    }\r\n  }\r\n\r\n  /*----------------------------------------------------------------------------Fav List--------------------------------------------------------------------------------*/\r\n\r\n  deleteItem = (event) => {\r\n    const options = {\r\n        method: \"DELETE\", //Use delete data in the express app.\r\n        headers: {\"Content-Type\": \"application/json\"}, //specify that the file been sent is a json file.\r\n        body: JSON.stringify(event) //Gets data from the state and then stringify the data so it may be passed to the express app.\r\n    }; \r\n\r\n    fetch(\"/favourites\", options) //Passes data to the express app with the header 'options'.\r\n    this.fetchData() //Calls function to update the page with new data.\r\n  }\r\n\r\n  checkMedia = (value) => { //Allow for a parameter to be passed through the function.\r\n    if(value.kind === \"song\") { //If any of the items returned is a song it'll return the audio element so the user can preview the music.\r\n      return <audio src={value.previewUrl} controls/>\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let displayFav =  this.state.favList.map( object =>  //Creates a map that will loop through an array of objects. For each object it'll return the code below.\r\n      [\r\n        <div class=\"displayItem\">\r\n          <img src={object.artworkUrl100}/>\r\n          <p>{object.artistName} -</p>\r\n          <br/> \r\n          <p>{object.trackName} </p>\r\n          {this.checkMedia(object)}\r\n          <br/>\r\n          <a herf=\"#\" onClick={() => this.deleteItem(object)}><img src={trash} alt=\"Trash can icon\" class=\"customButton\"/></a>\r\n        </div>\r\n      ]\r\n    )\r\n    return(\r\n      <div>\r\n        <div class=\"navBar\">\r\n          <h1>Your I Tunes favourites</h1>\r\n          <Link to={\"/\"} class=\"home\"><img src={home} alt=\"Home icon\"/></Link>\r\n          <br/>\r\n        </div>\r\n        <hr/>\r\n        {displayFav}\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Route, Switch} from 'react-router-dom' //Switch(allows for multiple paths.) Redirect(allows for redircting if certain values are inputted)\r\n\r\n//Imports the webpages to this js file\r\nimport Landing from './iTunesDiscover';\r\nimport favList from './favouritesList';\r\n\r\n//Allows for the webpages to be called on by the use of the words in \"path='/'\"\r\nexport default() => (\r\n    <BrowserRouter>\r\n        <Switch> \r\n            <Route path=\"/\" exact component={ Landing } />\r\n            <Route path=\"/favourites\" exact component={ favList } />\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n","import React from 'react';\nimport Routes from './routes/routes.js';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Routes />);\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}